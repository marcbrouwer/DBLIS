package gui;

import dblis.GraphInfo;
import dblis.SportData2;
import java.awt.Component;
import java.awt.Container;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;

/**
 *
 * @author Chen
 */
public class MainFrame extends CenterFrame {
    
    private FXPanel fxPanel;
    DefaultListModel candidateListModel = new DefaultListModel();
    DefaultListModel eventListModel = new DefaultListModel();
    boolean[] sportsSelection = new boolean[5];
    /**
     * Creates new form MainFrame
     */
    List<JCheckBox> sportCheckboxes;
    
    /*
    * - Function that disables all components in the given container.
    * @Param, container is the JPanel
    * @Param, enable, true for enabling, false for disabling.
    */
    public static void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container)component, enable);
            }
        }
        if(showYearDataCheckbox.isSelected()){
            startTimePicker.setEnabled(false);
            endTimePicker.setEnabled(false);
        } else {
            yearCombo.setEnabled(false);
        }
    }
    
    public static void enableComponents(boolean enable){
        enableComponents(parametersPanel, enable);
    }
    
    public MainFrame() {
        initComponents();
        centerize();
        sportCheckboxes = new ArrayList<>();
        sportCheckboxes.add(hockeyCheckBox);
        sportCheckboxes.add(tennisCheckBox);
        sportCheckboxes.add(footballCheckBox);
        sportCheckboxes.add(cyclingCheckBox);
        sportCheckboxes.add(skatingCheckBox);
        fxPanel = new FXPanel();
        testPanel.add(fxPanel);
//        GraphInfo graphInfo = new GraphInfo(startTimePicker.getDate(),
//                endTimePicker.getDate(), footballCheckBox.isSelected(),
//            hockeyCheckBox.isSelected(), cyclingCheckBox.isSelected(),
//            tennisCheckBox.isSelected(), skatingCheckBox.isSelected(), 1);
        fxPanel.drawScene(0);
        eventList.setModel(eventListModel);
        candidateList.setModel(candidateListModel);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sportsDialog = new javax.swing.JDialog();
        sportsChkBoxesPanel = new javax.swing.JPanel();
        footballCheckBox = new javax.swing.JCheckBox();
        hockeyCheckBox = new javax.swing.JCheckBox();
        cyclingCheckBox = new javax.swing.JCheckBox();
        tennisCheckBox = new javax.swing.JCheckBox();
        skatingCheckBox = new javax.swing.JCheckBox();
        selectSportsBtnsPanel = new javax.swing.JPanel();
        sportsSelectAllBtn = new javax.swing.JButton();
        sportsDeselectAllBtn = new javax.swing.JButton();
        sportsInverseSelectionBtn = new javax.swing.JButton();
        OkPanel = new javax.swing.JPanel();
        sportsCancelBtn = new javax.swing.JButton();
        sportsOKBtn = new javax.swing.JButton();
        parametersPanel = new javax.swing.JPanel();
        selectTimePeriodPanel = new javax.swing.JPanel();
        showYearDataCheckbox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        yearCombo = new javax.swing.JComboBox();
        startTimePicker = new com.lavantech.gui.comp.DateTimePicker();
        endTimePicker = new com.lavantech.gui.comp.DateTimePicker();
        showStuffBtnsPanel = new javax.swing.JPanel();
        timeIntervalPickerPanel = new javax.swing.JPanel();
        timeIntervalCombo = new javax.swing.JComboBox();
        pieChartBtn = new javax.swing.JButton();
        histogramBtn = new javax.swing.JButton();
        sportsChooseBtn = new javax.swing.JButton();
        showBtn = new javax.swing.JButton();
        showUserInterestsBtn = new javax.swing.JButton();
        showTwoChartsChkBox = new javax.swing.JCheckBox();
        visualizationPanel = new javax.swing.JPanel();
        testPanel = new javax.swing.JPanel();
        comparisonPanel = new javax.swing.JPanel();
        candidatesScrollPane = new javax.swing.JScrollPane();
        candidateList = new javax.swing.JList();
        eventsScrollPane = new javax.swing.JScrollPane();
        eventList = new javax.swing.JList();
        statsControlPanel = new javax.swing.JPanel();
        typeLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        sportLabel2 = new javax.swing.JLabel();
        sportComboBox = new javax.swing.JComboBox();
        teamAComboBox = new javax.swing.JComboBox();
        teamALabel = new javax.swing.JLabel();
        teamBLabel = new javax.swing.JLabel();
        teamBComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        addTeamBtn = new javax.swing.JButton();
        showComparisonBtn = new javax.swing.JButton();
        showComparisonBtn1 = new javax.swing.JButton();
        candidatesControlPanel = new javax.swing.JPanel();
        addEventBtn = new javax.swing.JButton();
        deleteOneBtn = new javax.swing.JButton();
        clearCandidateBtn = new javax.swing.JButton();

        sportsDialog.setTitle("Select the sports to show");

        footballCheckBox.setText("Football");
        sportsChkBoxesPanel.add(footballCheckBox);

        hockeyCheckBox.setText("Hockey");
        sportsChkBoxesPanel.add(hockeyCheckBox);

        cyclingCheckBox.setText("Cycling");
        sportsChkBoxesPanel.add(cyclingCheckBox);

        tennisCheckBox.setText("Tennis");
        sportsChkBoxesPanel.add(tennisCheckBox);

        skatingCheckBox.setText("Skating");
        sportsChkBoxesPanel.add(skatingCheckBox);

        sportsSelectAllBtn.setText("Select all");
        sportsSelectAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsSelectAllBtnActionPerformed(evt);
            }
        });
        selectSportsBtnsPanel.add(sportsSelectAllBtn);

        sportsDeselectAllBtn.setText("Deselect all");
        sportsDeselectAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsDeselectAllBtnActionPerformed(evt);
            }
        });
        selectSportsBtnsPanel.add(sportsDeselectAllBtn);

        sportsInverseSelectionBtn.setText("Invert selection");
        sportsInverseSelectionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsInverseSelectionBtnActionPerformed(evt);
            }
        });
        selectSportsBtnsPanel.add(sportsInverseSelectionBtn);

        sportsCancelBtn.setText("Cancel");
        sportsCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsCancelBtnActionPerformed(evt);
            }
        });
        OkPanel.add(sportsCancelBtn);

        sportsOKBtn.setText("OK");
        sportsOKBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsOKBtnActionPerformed(evt);
            }
        });
        OkPanel.add(sportsOKBtn);

        javax.swing.GroupLayout sportsDialogLayout = new javax.swing.GroupLayout(sportsDialog.getContentPane());
        sportsDialog.getContentPane().setLayout(sportsDialogLayout);
        sportsDialogLayout.setHorizontalGroup(
            sportsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sportsDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(sportsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sportsChkBoxesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sportsDialogLayout.createSequentialGroup()
                        .addGroup(sportsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(OkPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectSportsBtnsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        sportsDialogLayout.setVerticalGroup(
            sportsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sportsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sportsChkBoxesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectSportsBtnsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OkPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("That bird is fit");

        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        showYearDataCheckbox.setText("<html>Show data<br>in one year</html>");
        showYearDataCheckbox.setPreferredSize(new java.awt.Dimension(93, 50));
        showYearDataCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearDataCheckboxChanged(evt);
            }
        });
        showYearDataCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showYearDataCheckboxActionPerformed(evt);
            }
        });
        selectTimePeriodPanel.add(showYearDataCheckbox);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Year"));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        yearCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "< -- >", "2015", "2014", "2013" }));
        yearCombo.setEnabled(false);
        jPanel3.add(yearCombo);

        selectTimePeriodPanel.add(jPanel3);

        startTimePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("Start Time:"));
        selectTimePeriodPanel.add(startTimePicker);

        endTimePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("End Time:"));
        selectTimePeriodPanel.add(endTimePicker);

        timeIntervalPickerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Time Interval"));
        timeIntervalPickerPanel.setLayout(new javax.swing.BoxLayout(timeIntervalPickerPanel, javax.swing.BoxLayout.LINE_AXIS));

        timeIntervalCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Month", "Week", "Day" }));
        timeIntervalCombo.setMinimumSize(new java.awt.Dimension(72, 50));
        timeIntervalPickerPanel.add(timeIntervalCombo);

        showStuffBtnsPanel.add(timeIntervalPickerPanel);

        pieChartBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/chart_pie_32x32.png"))); // NOI18N
        pieChartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pieChartBtnActionPerformed(evt);
            }
        });
        showStuffBtnsPanel.add(pieChartBtn);

        histogramBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/bar_chart-512_32x32.png"))); // NOI18N
        histogramBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramBtnActionPerformed(evt);
            }
        });
        showStuffBtnsPanel.add(histogramBtn);

        sportsChooseBtn.setText("<html><center>Select Sports<br></center></html>");
        sportsChooseBtn.setPreferredSize(new java.awt.Dimension(74, 41));
        sportsChooseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportsChooseBtnActionPerformed(evt);
            }
        });
        showStuffBtnsPanel.add(sportsChooseBtn);

        showBtn.setText("Show");
        showBtn.setPreferredSize(new java.awt.Dimension(65, 41));
        showBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBtnActionPerformed(evt);
            }
        });
        showStuffBtnsPanel.add(showBtn);

        showUserInterestsBtn.setText("<html><center>User<br>Interests</center></html>");
        showUserInterestsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUserInterestsBtnActionPerformed(evt);
            }
        });
        showStuffBtnsPanel.add(showUserInterestsBtn);

        showTwoChartsChkBox.setText("<html>Two<br>charts</html>");
        showTwoChartsChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTwoChartsChkBoxActionPerformed(evt);
            }
        });
        showStuffBtnsPanel.add(showTwoChartsChkBox);

        javax.swing.GroupLayout parametersPanelLayout = new javax.swing.GroupLayout(parametersPanel);
        parametersPanel.setLayout(parametersPanelLayout);
        parametersPanelLayout.setHorizontalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectTimePeriodPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showStuffBtnsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE))
                .addContainerGap())
        );
        parametersPanelLayout.setVerticalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parametersPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(selectTimePeriodPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showStuffBtnsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        visualizationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Visualization"));
        visualizationPanel.setLayout(new java.awt.GridLayout(1, 0));

        testPanel.setBackground(new java.awt.Color(255, 255, 255));
        testPanel.setLayout(new java.awt.GridLayout(1, 0));
        visualizationPanel.add(testPanel);

        comparisonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistics comparison"));

        candidatesScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Candidate(s)"));

        candidateList.setModel(new javax.swing.AbstractListModel() {
            List<String> items = new ArrayList<>();
            public int getSize() { return items.size(); }
            public Object getElementAt(int i) { return items.get(i); }
            public void addAll(List<String> newItems){ items.addAll(newItems); }
            public void addElement(String item){ items.add(item);}
        });
        candidatesScrollPane.setViewportView(candidateList);

        eventsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Event(s)"));

        eventList.setModel(new javax.swing.DefaultListModel() {
            List<String> items = new ArrayList<>();
            public int getSize() { return items.size(); }
            public Object getElementAt(int i) { return items.get(i); }
            public void addAll(List<String> newItems){ items.addAll(newItems); }
            public void addElement(String item){ items.add(item);}
        });
        eventsScrollPane.setViewportView(eventList);

        typeLabel.setText("Type");

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<-->", "Event", "Team", "Player", "Match", "Other" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comparisonTypeChangedHandler(evt);
            }
        });

        sportLabel2.setText("Sport");

        sportComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<-->", "Football", "Hockey", "Tennis", "Skating", "Cycling" }));
        sportComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportTypeChangedHandler(evt);
            }
        });

        teamAComboBox.setEnabled(false);

        teamALabel.setText("Team A");
        teamALabel.setEnabled(false);

        teamBLabel.setText("Team B");
        teamBLabel.setEnabled(false);

        teamBComboBox.setEnabled(false);

        addTeamBtn.setText("Add");
        addTeamBtn.setEnabled(false);
        addTeamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTeamBtnActionPerformed(evt);
            }
        });
        jPanel2.add(addTeamBtn);

        showComparisonBtn.setText("Show");
        showComparisonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showComparisonBtnActionPerformed(evt);
            }
        });
        jPanel2.add(showComparisonBtn);

        showComparisonBtn1.setText("Show Users");
        showComparisonBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showComparisonBtn1ActionPerformed(evt);
            }
        });
        jPanel2.add(showComparisonBtn1);

        javax.swing.GroupLayout statsControlPanelLayout = new javax.swing.GroupLayout(statsControlPanel);
        statsControlPanel.setLayout(statsControlPanelLayout);
        statsControlPanelLayout.setHorizontalGroup(
            statsControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statsControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(statsControlPanelLayout.createSequentialGroup()
                        .addComponent(teamALabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teamAComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(statsControlPanelLayout.createSequentialGroup()
                        .addGap(0, 9, Short.MAX_VALUE)
                        .addComponent(typeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sportLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sportComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(statsControlPanelLayout.createSequentialGroup()
                        .addComponent(teamBLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teamBComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        statsControlPanelLayout.setVerticalGroup(
            statsControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statsControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sportLabel2)
                    .addComponent(sportComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statsControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamALabel)
                    .addComponent(teamAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statsControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamBLabel)
                    .addComponent(teamBComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        candidatesControlPanel.setLayout(new javax.swing.BoxLayout(candidatesControlPanel, javax.swing.BoxLayout.PAGE_AXIS));

        addEventBtn.setText("Add");
        addEventBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEventBtnActionPerformed(evt);
            }
        });
        candidatesControlPanel.add(addEventBtn);

        deleteOneBtn.setText("Delete");
        deleteOneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOneBtnActionPerformed(evt);
            }
        });
        candidatesControlPanel.add(deleteOneBtn);

        clearCandidateBtn.setText("Clear all");
        clearCandidateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCandidateBtnActionPerformed(evt);
            }
        });
        candidatesControlPanel.add(clearCandidateBtn);

        javax.swing.GroupLayout comparisonPanelLayout = new javax.swing.GroupLayout(comparisonPanel);
        comparisonPanel.setLayout(comparisonPanelLayout);
        comparisonPanelLayout.setHorizontalGroup(
            comparisonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comparisonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statsControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(candidatesControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(candidatesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        comparisonPanelLayout.setVerticalGroup(
            comparisonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(candidatesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(eventsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(comparisonPanelLayout.createSequentialGroup()
                .addComponent(statsControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(comparisonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(candidatesControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(visualizationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(parametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comparisonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(visualizationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comparisonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(parametersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sportsChooseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsChooseBtnActionPerformed
        /*for(JCheckBox cb : sportCheckboxes){
            cb.setSelected(false);
        }*/
        sportsDialog.setSize(380, 180);
        sportsDialog.setLocationRelativeTo(this);
        sportsDialog.show(); 
    }//GEN-LAST:event_sportsChooseBtnActionPerformed

    private void sportsOKBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsOKBtnActionPerformed
        sportsSelection[0] = footballCheckBox.isSelected();
        sportsSelection[1] = hockeyCheckBox.isSelected();
        sportsSelection[2] = cyclingCheckBox.isSelected();
        sportsSelection[3] = tennisCheckBox.isSelected();
        sportsSelection[4] = skatingCheckBox.isSelected();
        sportsDialog.dispose();
    }//GEN-LAST:event_sportsOKBtnActionPerformed

    private void sportsCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsCancelBtnActionPerformed
        footballCheckBox.setSelected(sportsSelection[0]);
        hockeyCheckBox.setSelected(sportsSelection[1]);
        cyclingCheckBox.setSelected(sportsSelection[2]);
        tennisCheckBox.setSelected(sportsSelection[3]);
        skatingCheckBox.setSelected(sportsSelection[4]);
        sportsDialog.dispose();
        
    }//GEN-LAST:event_sportsCancelBtnActionPerformed

    private void sportsSelectAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsSelectAllBtnActionPerformed
        sportCheckboxes.stream().forEach((cb) -> {
            cb.setSelected(true);
        });
    }//GEN-LAST:event_sportsSelectAllBtnActionPerformed

    private void sportsDeselectAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsDeselectAllBtnActionPerformed
        sportCheckboxes.stream().forEach((cb) -> {
            cb.setSelected(false);
        });
    }//GEN-LAST:event_sportsDeselectAllBtnActionPerformed

    private void sportsInverseSelectionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportsInverseSelectionBtnActionPerformed
        sportCheckboxes.stream().forEach((cb) -> {
            cb.setSelected(!cb.isSelected());
        });
    }//GEN-LAST:event_sportsInverseSelectionBtnActionPerformed

    private void showYearDataCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showYearDataCheckboxActionPerformed
        
    }//GEN-LAST:event_showYearDataCheckboxActionPerformed

    private void yearDataCheckboxChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearDataCheckboxChanged
        boolean showYear  = showYearDataCheckbox.isSelected();
        this.yearCombo.setEnabled(showYear);
        this.startTimePicker.setEnabled(!showYear);
        this.endTimePicker.setEnabled(!showYear);
    }//GEN-LAST:event_yearDataCheckboxChanged

    private void showBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBtnActionPerformed
        setParameters();
        SportData2.getInstance().setLineInterval(getInterval());
        fxPanel.drawScene(2);
    }//GEN-LAST:event_showBtnActionPerformed

    private void pieChartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pieChartBtnActionPerformed
        setParameters();
        PopFrame pf = new PopFrame(3);
        pf.setVisible(true);
        pf.toFront();
    }//GEN-LAST:event_pieChartBtnActionPerformed

    private void showTwoChartsChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTwoChartsChkBoxActionPerformed
        
    }//GEN-LAST:event_showTwoChartsChkBoxActionPerformed

    private void showComparisonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showComparisonBtnActionPerformed
        setParameters();
        List<String> candidates = getCandidates();
        SportData2.getInstance().setSelected(candidates);
        PopFrame pf = new PopFrame(5);
        pf.setVisible(true);
        pf.toFront();
    }//GEN-LAST:event_showComparisonBtnActionPerformed

    private void histogramBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramBtnActionPerformed
        setParameters();
        PopFrame pf = new PopFrame(5);
        pf.setVisible(true);
        pf.toFront();
    }//GEN-LAST:event_histogramBtnActionPerformed
    
    private void addEventBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEventBtnActionPerformed
        if(!eventList.isSelectionEmpty()){
            String newCandidate = eventList.getSelectedValue().toString();
            candidateListModel.addElement(newCandidate);
        }
    }//GEN-LAST:event_addEventBtnActionPerformed

    private void comparisonTypeChangedHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comparisonTypeChangedHandler
        if (typeComboBox.getSelectedItem().toString().equals("Match")) {
            teamALabel.setEnabled(true);
            teamBLabel.setEnabled(true);
            teamAComboBox.setEnabled(true);
            teamBComboBox.setEnabled(true);
            eventList.setEnabled(false);
            addEventBtn.setEnabled(false);
            addTeamBtn.setEnabled(true);
        } else {
            teamALabel.setEnabled(false);
            teamBLabel.setEnabled(false);
            teamAComboBox.setEnabled(false);
            teamBComboBox.setEnabled(false);
            addTeamBtn.setEnabled(false);
            eventList.setEnabled(true);
            addEventBtn.setEnabled(true);
        }
        
        sportChanged();
    }//GEN-LAST:event_comparisonTypeChangedHandler
    
    private void sportTypeChangedHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportTypeChangedHandler
        sportChanged();
    }//GEN-LAST:event_sportTypeChangedHandler
    
    private void clearCandidateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCandidateBtnActionPerformed
        candidateListModel.clear();
    }//GEN-LAST:event_clearCandidateBtnActionPerformed

    private void showComparisonBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showComparisonBtn1ActionPerformed
        setParameters();
        List<String> candidates = getCandidates();
        SportData2.getInstance().setSelected(candidates);
        PopFrame pf = new PopFrame(6);
        pf.setVisible(true);
        pf.toFront();
    }//GEN-LAST:event_showComparisonBtn1ActionPerformed

    private void deleteOneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOneBtnActionPerformed
        if(!candidateList.isSelectionEmpty()){
            candidateListModel.remove(candidateList.getSelectedIndex());
        }
    }//GEN-LAST:event_deleteOneBtnActionPerformed

    private void addTeamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTeamBtnActionPerformed
        String teamA = teamAComboBox.getSelectedItem().toString();
        String teamB = teamBComboBox.getSelectedItem().toString();
        if(!(teamA.isEmpty() && teamB.isEmpty())){
            String newCandidate =  teamA + " vs " + teamB;   
            candidateListModel.addElement(newCandidate);
        }
    }//GEN-LAST:event_addTeamBtnActionPerformed

    private void showUserInterestsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUserInterestsBtnActionPerformed
        setParameters();
        PopFrame pf = new PopFrame(4);
        pf.setVisible(true);
        pf.toFront();        
    }//GEN-LAST:event_showUserInterestsBtnActionPerformed
    
    private List<String> getCandidates(){
        List<String> candidates = new ArrayList<>();
        for(int i = 0; i < candidateListModel.size(); i++){
            String match = candidateListModel.getElementAt(i).toString().replaceAll("vs", ";&;");
            candidates.add(match);
            System.out.println(match);
        }
        return candidates;
    }
    
    public void sportChanged(){
        String sport = sportComboBox.getSelectedItem().toString().toLowerCase();
        eventListModel.clear();
        if (!typeComboBox.getSelectedItem().toString().equals("Match")) {
            List<String> toAdd = new ArrayList<>();
            switch (typeComboBox.getSelectedItem().toString()) {
                case "Event":
                    toAdd = SportData2.getInstance().getEvents(sport);
                    break;
                case "Team":
                    toAdd = SportData2.getInstance().getTeams(sport);
                    break;
                case "Player":
                    toAdd = SportData2.getInstance().getPlayers(sport);
                    break;
                case "Other":
                    toAdd = SportData2.getInstance().getOther(sport);
                    break;
            }
            for (String s : toAdd) {
                eventListModel.addElement(s);
            }     
        } else {
            List<String> teams = SportData2.getInstance().getTeams(sport);
            teamAComboBox.removeAllItems();
            teamBComboBox.removeAllItems();
            for (String s : teams) {
                teamAComboBox.addItem(s);
                teamBComboBox.addItem(s);
            }
        }
    }
    
    private void setParameters() {
        String yearString = yearCombo.getSelectedItem().toString();
        int year = 0;
        
        try {
            year = Integer.parseInt(yearString);
        } catch (NumberFormatException ex) {
        }
        
        SportData2.getInstance().setYear(year);
        SportData2.getInstance().setYearSelected(showYearDataCheckbox.isSelected());
        SportData2.getInstance().setDates(getStartDate(), getEndDate());
        SportData2.getInstance().setSelected(getSports());
        SportData2.getInstance().setInterval(getInterval());
        SportData2.getInstance().setFootballSeperate(showTwoChartsChkBox.isSelected());
    }
    
    private int getInterval() {
        int timeInterval = 0;
        String selected = timeIntervalCombo.getSelectedItem().toString();
        switch (selected) {
            case "Month":
                timeInterval = 30;
                break;
            case "Week":
                timeInterval = 7;
                break;
            case "Day":
                timeInterval = 1;
                break;
        }
        return timeInterval;
    }
    
    private Date getStartDate() {
        return startTimePicker.getDate();
    }
    
    private Date getEndDate() {
        return endTimePicker.getDate();
    }
    
    private List<String> getSports() {
        List sports = new ArrayList();
        if(footballCheckBox.isSelected()) {
            sports.add(footballCheckBox.getText().toLowerCase());
        }
        if(hockeyCheckBox.isSelected()) {
            sports.add(hockeyCheckBox.getText().toLowerCase());
        }
        if(cyclingCheckBox.isSelected()) {
            sports.add(cyclingCheckBox.getText().toLowerCase());
        }
        if(tennisCheckBox.isSelected()) {
            sports.add(tennisCheckBox.getText().toLowerCase());
        }
        if(skatingCheckBox.isSelected()) {
            sports.add(skatingCheckBox.getText().toLowerCase());
        }
        return sports;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        SportData2.getInstance().init();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel OkPanel;
    private javax.swing.JButton addEventBtn;
    private javax.swing.JButton addTeamBtn;
    private javax.swing.JList candidateList;
    private javax.swing.JPanel candidatesControlPanel;
    private javax.swing.JScrollPane candidatesScrollPane;
    private javax.swing.JButton clearCandidateBtn;
    private javax.swing.JPanel comparisonPanel;
    private javax.swing.JCheckBox cyclingCheckBox;
    private javax.swing.JButton deleteOneBtn;
    private static com.lavantech.gui.comp.DateTimePicker endTimePicker;
    private javax.swing.JList eventList;
    private javax.swing.JScrollPane eventsScrollPane;
    private javax.swing.JCheckBox footballCheckBox;
    private javax.swing.JButton histogramBtn;
    private javax.swing.JCheckBox hockeyCheckBox;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private static javax.swing.JPanel parametersPanel;
    private javax.swing.JButton pieChartBtn;
    private javax.swing.JPanel selectSportsBtnsPanel;
    private javax.swing.JPanel selectTimePeriodPanel;
    private javax.swing.JButton showBtn;
    private javax.swing.JButton showComparisonBtn;
    private javax.swing.JButton showComparisonBtn1;
    private javax.swing.JPanel showStuffBtnsPanel;
    private javax.swing.JCheckBox showTwoChartsChkBox;
    private javax.swing.JButton showUserInterestsBtn;
    private static javax.swing.JCheckBox showYearDataCheckbox;
    private javax.swing.JCheckBox skatingCheckBox;
    private javax.swing.JComboBox sportComboBox;
    private javax.swing.JLabel sportLabel2;
    private javax.swing.JButton sportsCancelBtn;
    private javax.swing.JPanel sportsChkBoxesPanel;
    private javax.swing.JButton sportsChooseBtn;
    private javax.swing.JButton sportsDeselectAllBtn;
    private javax.swing.JDialog sportsDialog;
    private javax.swing.JButton sportsInverseSelectionBtn;
    private javax.swing.JButton sportsOKBtn;
    private javax.swing.JButton sportsSelectAllBtn;
    private static com.lavantech.gui.comp.DateTimePicker startTimePicker;
    private javax.swing.JPanel statsControlPanel;
    private javax.swing.JComboBox teamAComboBox;
    private javax.swing.JLabel teamALabel;
    private javax.swing.JComboBox teamBComboBox;
    private javax.swing.JLabel teamBLabel;
    private javax.swing.JCheckBox tennisCheckBox;
    private javax.swing.JPanel testPanel;
    private javax.swing.JComboBox timeIntervalCombo;
    private javax.swing.JPanel timeIntervalPickerPanel;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JPanel visualizationPanel;
    private static javax.swing.JComboBox yearCombo;
    // End of variables declaration//GEN-END:variables
}
